CREATE TABLE TB_EMPRESA(
ID INT,
NOME VARCHAR(50)
)
GO

/* CONECTANDO A UM BANCO */

USE EMPRESA
GO

/* CRIACAO DE TABELAS */


CREATE TABLE ALUNO(
	IDALUNO INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	NASCIMENTO DATE NOT NULL,
	EMAIL VARCHAR(30) UNIQUE
)
GO

/* CONSTRAINTS */

ALTER TABLE ALUNO
ADD CONSTRAINT CK_SEXO CHECK (SEXO IN ('M','F'))
GO

/* 1 X 1 */

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY IDENTITY(100,10),
	BAIRRO VARCHAR(30),
	UF CHAR(2) NOT NULL,
	CHECK (UF IN('RJ', 'SP', 'MG')),
	ID_ALUNO INT UNIQUE
)
GO

/* CRIANDO A FK */

ALTER TABLE ENDERECO
ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY(ID_ALUNO)
REFERENCES ALUNO(IDALUNO)
GO

/* COMANDOS DE DESCRICAO */

/* PROCEDURES JÁ CRIADAS E ARMAZENADAS NO SISTEMA */

SP_COLUMNS ALUNO
GO

SP_HELP ALUNO
GO

/* INSERINDO DADOS */

INSERT INTO ALUNO VALUES('ANDRE','M','1982/08/09','ANDRE@IG.COM')
INSERT INTO ALUNO VALUES('ANA','F','2004/06/30','ANA@IG.COM')
INSERT INTO ALUNO VALUES('RUI','M','1972/05/26','RUI@IG.COM')
INSERT INTO ALUNO VALUES('JOHN JONES','M','1986/4/10','JOHNJONES@IG.COM')
GO

SELECT * FROM ALUNO
GO
/* INSERTS PARA ENDERECO */


INSERT INTO ENDERECO VALUES('FLAMENGO', 'RJ', 1)
INSERT INTO ENDERECO VALUES('CENTRO', 'SP', 2)
INSERT INTO ENDERECO VALUES('MORUMBI', 'SP', 3)
INSERT INTO ENDERECO VALUES('CENTRO', 'MG', 4)
GO
/* CRIANDO TABELA TELEFONE */
CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY IDENTITY,
	TIPO CHAR(3) NOT NULL,
	CHECK (TIPO IN('RES','COM', 'CEL')),
	NUMERO VARCHAR(10),
	ID_ALUNO INT,
)
GO

INSERT INTO TELEFONE VALUES('CEL', '7899899', 2)
INSERT INTO TELEFONE VALUES('RES', '684563', 2)
INSERT INTO TELEFONE VALUES('COM', '4564786', 3)
INSERT INTO TELEFONE VALUES('CEL', '8696954', 3)
GO

/* PEGAR DATA ATUAL */

SELECT GETDATE()
GO

/* CLAUSULA AMBIGUA */

SELECT A.NOME,
	   ISNULL(T.TIPO, 'SEM') AS "TIPO",
	   ISNULL(T.NUMERO,'NUMERO') AS "TELEFONE",
	   E.BAIRRO,
	   E.UF
FROM ALUNO A
	LEFT JOIN TELEFONE T
	ON A.IDALUNO = T.ID_ALUNO
	INNER JOIN ENDERECO E
	ON A.IDALUNO = E.ID_ALUNO
GO

/* DATAS */

SELECT NOME, NASCIMENTO
FROM ALUNO
GO


/* FUNCAO GETDATE() TRAZ DIA E HORA */

SELECT NOME, GETDATE() AS DIA_HORA FROM ALUNO
GO

/* DATADIFF - CALCULA A DIFERENÇA ENTRE 2 DATAS */
SELECT NOME, DATEDIFF(DAY, NASCIMENTO, GETDATE()) AS "IDADE"
FROM ALUNO 
GO  

SELECT NOME, DATEDIFF(MONTH, NASCIMENTO, GETDATE()) AS "IDADE"
FROM ALUNO 
GO  

SELECT NOME, DATEDIFF(YEAR, NASCIMENTO, GETDATE()) AS "IDADE"
FROM ALUNO 
GO  

/* DATENAME - TRAZ O NOME DA PARTE DA DATA EM QUESTAO */
SELECT NOME, DATENAME(MONTH, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(YEAR, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO)
FROM ALUNO
GO

/* DATEPART - POREM O RETORNO É UM INTEIRO */

SELECT NOME, DATEPART(MONTH, NASCIMENTO)
FROM ALUNO
GO

/* DATEADD - RETORNA UMA DATA SOMANDO A OUTRA DATA*/

SELECT DATEADD(YEAR, 20, GETDATE());
GO

/* CONVERSAO DE DADOS */

/*CAST - CONVERTE UMA STRING PARA NUMERICO 
*/

SELECT CAST('1' AS INT) + CAST('1' AS INT)
GO
 
--https://learn.microsoft.com/pt-br/sql/t-sql/data-types/data-type-conversion-database-engine?view=sql-server-ver16

/* CONVERSAO E CONCATENACAO */

SELECT NOME,
DAY(NASCIMENTO)
FROM ALUNO
GO

/* MODELO BRASILEIRO EXERCICIO */
SELECT NOME,
      CAST(DAY(NASCIMENTO) AS VARCHAR) +
'/' + CAST(MONTH(NASCIMENTO) AS VARCHAR) +
'/' + CAST(YEAR(NASCIMENTO) AS VARCHAR) AS "NASCIMENTO"
FROM ALUNO
GO

/* CHARINDEX - RETORNA UM INTEIRO */

SELECT NOME, CHARINDEX('A',NOME) AS INDICE
FROM ALUNO
GO


SELECT NOME, CHARINDEX('A',NOME,2) AS INDICE
FROM ALUNO
GO

/* BULK INSERT - IMPORTACAO DE ARQUIVOS */

CREATE TABLE LANCAMENTO_CONTABIL(
	CONTA INT,
	VALOR INT,
	DEB_CRED CHAR(1) NOT NULL
)
GO

BULK INSERT LANCAMENTO_CONTABIL
FROM 'Z:\SCRIPTS\SQL SERVER\CONTAS.txt'
WITH 
(
	FIRSTROW = 2,
	DATAFILETYPE = 'CHAR',
	FIELDTERMINATOR = '\t',
	ROWTERMINATOR = '\n'
)
GO

SELECT * FROM LANCAMENTO_CONTABIL
GO

/*EXERCICIO CHARINDEX*/
SELECT CONTA, VALOR,
CHARINDEX('D',DEB_CRED) AS DEBITO,
CHARINDEX('C',DEB_CRED) AS CREDITO,
CHARINDEX('C',DEB_CRED) * 2 - 1 AS MULTIPLICADOR
FROM LANCAMENTO_CONTABIL
GO

SELECT CONTA, SUM(VALOR * (CHARINDEX('C',DEB_CRED) * 2 - 1))  AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
ORDER BY CONTA
GO

/*TRIGGERS*/

CREATE TABLE PRODUTOS(
	IDPRODUTO INT PRIMARY KEY  IDENTITY,
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC(10,2) NOT NULL
)
GO

CREATE TABLE HISTORICO(
	IDOPERACAO INT PRIMARY KEY IDENTITY,
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECOANTIGO NUMERIC(10,2) NOT NULL,
	PRECONOVO NUMERIC(10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(30),
	MENSAGEM VARCHAR(100) 
)
GO

INSERT INTO PRODUTOS VALUES('LIVRO SQL SERVER', 'LIVROS', 98.00)
INSERT INTO PRODUTOS VALUES('LIVRO ORACLE', 'LIVROS', 50.00)
INSERT INTO PRODUTOS VALUES('CODIGO LIMPO', 'LIVROS', 80.00)
INSERT INTO PRODUTOS VALUES('LICENÇA POWERCENTER', 'SOFTWARE', 45000.00)
INSERT INTO PRODUTOS VALUES('NOTEBOOK I7', 'COMPUTADORES', 3200.00)
INSERT INTO PRODUTOS VALUES('LIVRO ARQUITETURA LIMPA', 'LIVRO', 90.00)
GO

/* VERIFICANDO USUARIOS */

SELECT SUSER_NAME()
GO

/* TRIGGER DE DADOS - DATA MANIPULATION LANGUAGE */

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE AS
IF UPDATE(PRECO)
BEGIN
	DECLARE @IDPRODUTO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECONOVO NUMERIC(10,2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @MESNSAGEM VARCHAR(100)

	SELECT @IDPRODUTO = IDPRODUTO FROM INSERTED
	SELECT @PRODUTO = NOME FROM INSERTED
	SELECT @CATEGORIA = CATEGORIA FROM INSERTED
	SELECT @PRECO = PRECO FROM DELETED
	SELECT @PRECONOVO = PRECO FROM INSERTED

	SET @DATA = GETDATE()
	SET @USUARIO = SUSER_NAME()
	SET @MESNSAGEM = 'VALOR NÃO INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO
	(PRODUTO, CATEGORIA, PRECOANTIGO, PRECONOVO, DATA, USUARIO, MENSAGEM)
	VALUES 
	(@PRODUTO, @CATEGORIA, @PRECO, @PRECONOVO, @DATA, @USUARIO, @MESNSAGEM)

	PRINT 'TRIGGER EXECUTADA COM SUCESSO'
END
GO

/* EXECUTANDO UM UPDATE */

UPDATE PRODUTOS SET PRECO = 100.00
WHERE IDPRODUTO = 1
GO

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO
GO

DROP TRIGGER TRG_ATUALIZA_PRECO
GO

UPDATE PRODUTOS SET PRECO = 300.00
WHERE IDPRODUTO = 2
GO

UPDATE PRODUTOS SET NOME = 'LIVRO JAVASCRIPT'
WHERE IDPRODUTO = 2
GO 
SELECT * FROM HISTORICO
GO

/* VARIAVEIS DE SELECT */

CREATE TABLE RESULTADO(
	IDRESULTADO INT PRIMARY KEY IDENTITY,
	RESULTADO INT
)
GO

INSERT INTO RESULTADO VALUES((SELECT 10 + 10))
GO

/* ATRIBUINDO SELECTS  */
DECLARE
	@RESULTADO INT
	SET @RESULTADO = (SELECT 50 + 50)
	INSERT INTO RESULTADO VALUES(@RESULTADO)
	PRINT 'VALOR INSERIDO NA TABELA: ' + CAST(@RESULTADO AS VARCHAR)
GO 

/* TRIGGER UPDATE */
CREATE TABLE EMPREGADO(
	IDEMP INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30),
	SALARIO MONEY,
	IDGERENTE INT
)
GO

ALTER TABLE EMPREGADO 
ADD CONSTRAINT FK_GERENTE
FOREIGN KEY(IDGERENTE) REFERENCES EMPREGADO(IDEMP)
GO

INSERT INTO EMPREGADO VALUES ('CLARA', 5000.00, NULL)
INSERT INTO EMPREGADO VALUES ('CELIA', 4000.00, 1)
INSERT INTO EMPREGADO VALUES ('JONES', 4000.00, 1)
GO

CREATE TABLE HIST_SALARIO
(
	IDEMPREGADO INT,
	ANTIGOSAL MONEY,
	NOVOSAL MONEY,
	DATA DATETIME
)
GO

CREATE TRIGGER TRG_SALARIO
ON DBO.EMPREGADO
FOR UPDATE AS
IF UPDATE(SALARIO)
BEGIN
	INSERT INTO HIST_SALARIO
	(IDEMPREGADO, ANTIGOSAL, NOVOSAL,DATA)
	SELECT D.IDEMP, D.NOME, D.SALARIO, I.SALARIO, GETDATE()
	FROM DELETED D, INSERTED I
	WHERE D.IDEMP = I.IDEMP


END
GO

UPDATE EMPREGADO SET SALARIO = SALARIO * 1.1
GO

SELECT * FROM HIST_SALARIO
GO

/* SALARIO ANTIGO, NOVO, DATA E NOME DO EMPREGO */

CREATE TABLE SALARIO_RANGE(
	MINSAL MONEY,
	MAXSAL MONEY,
)
GO

INSERT INTO SALARIO_RANGE VALUES(2000.00, 6000.00)
GO

CREATE TRIGGER TRG_RANGE
ON DBO.EMPREGADO
FOR INSERT, UPDATE AS
	DECLARE
		@MINSAL MONEY,
		@MAXSAL MONEY,
		@ATUALSAL MONEY
	
	SELECT @MINSAL = MINSAL, @MAXSAL = MAXSAL FROM SALARIO_RANGE

	SELECT @ATUALSAL = I.SALARIO
	FROM INSERTED I

	IF(@ATUALSAL < @MINSAL)
	BEGIN
		RAISERROR('SALARIO MENOR QUE O PISO', 16,1)
		ROLLBACK TRANSACTION
	END

	IF(@ATUALSAL > @MAXSAL)
	BEGIN
		RAISERROR('SALARIO MAIOR QUE O TETO', 16,1)
		ROLLBACK TRANSACTION
	END
GO

UPDATE EMPREGADO SET SALARIO = 9000.00
WHERE IDEMP = 1
GO

UPDATE EMPREGADO SET SALARIO = 1000.00
WHERE IDEMP = 1
GO

UPDATE EMPREGADO SET SALARIO = 3000.00
WHERE IDEMP = 1
GO

SELECT * FROM EMPREGADO
GO

/* VERIFICANDO O TEXTO DA UMA TRIGGER */

SP_HELPTEXT TRG_RANGE
GO

DROP TABLE TELEFONE
/* PROCEDURES */

-- SP - STORAGE PROCEDURES

CREATE TABLE PESSOA(
	IDPESSOA INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL CHECK(SEXO IN('M', 'F')),
	NASCIMENTO DATE NOT NULL
)
GO

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY IDENTITY,
	TIPO CHAR(3) NOT NULL CHECK(TIPO IN('RES', 'COM', 'CEL')),
	NUMERO CHAR(10) NOT NULL,
	ID_PESSOA INT
)
GO

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE_PESSOA
FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(IDPESSOA)
ON DELETE CASCADE
GO

INSERT INTO PESSOA VALUES('ANTONIO', 'M', '1981-02-13')
INSERT INTO PESSOA VALUES('DANIEL', 'M', '1985-03-18')
INSERT INTO PESSOA VALUES('CLEIDE', 'F', '1979-10-13')
INSERT INTO PESSOA VALUES('KAKACHU', 'M', '2004-10-13')
GO

INSERT INTO TELEFONE VALUES('CEL', '4235467', 1)
INSERT INTO TELEFONE VALUES('COM', '357576', 1)
INSERT INTO TELEFONE VALUES('RES', '4564456', 2)
INSERT INTO TELEFONE VALUES('CEL', '589864', 2)
INSERT INTO TELEFONE VALUES('CEL', '8746568', 2)
INSERT INTO TELEFONE VALUES('COM', '89747556', 3)
INSERT INTO TELEFONE VALUES('RES', '9628679', 3)
INSERT INTO TELEFONE VALUES('COM', '3657867', 3)

/* CRIANDO PROCEDURE */

CREATE PROC SOMA
AS
	SELECT 10 + 10 AS SOMA
GO

/* EXECUCAO DA PRECEDURE */

EXEC SOMA
GO

/* DINAMICAS - COM PARAMETROS */

CREATE PROC CONTA @NUM1 INT, @NUM2 INT
AS
	SELECT @NUM1 + @NUM2
GO

/* EXECUTANDO */

EXEC CONTA 90, 78
GO

/* PROCEDURES EM TABELAS  */

SELECT NOME, NUMERO
FROM PESSOA
	INNER JOIN TELEFONE
	ON IDPESSOA = ID_PESSOA
	WHERE TIPO = 'CEL'
GO

/* TRAZER OS TELEFONES DE ACORDO COM O TIPO PASSADO */

CREATE PROC TELEFONES @TIPO CHAR(3)
AS
SELECT NOME, NUMERO
FROM PESSOA
	INNER JOIN TELEFONE
	ON IDPESSOA = ID_PESSOA
	WHERE TIPO = @TIPO
GO

EXEC TELEFONES 'CEL'
GO

EXEC TELEFONES 'COM'
GO

EXEC TELEFONES 'RES'
GO

/* PARAMETROS DE OUTPUT */

SELECT TIPO, COUNT(*) AS QUANTIDADE
FROM TELEFONE
GROUP BY TIPO
GO

CREATE PROC GET_TIPO @TIPO CHAR(3), @CONTADOR INT OUTPUT
AS 
	SELECT @CONTADOR = COUNT(*)
	FROM TELEFONE
	WHERE TIPO = @TIPO
GO

/* EXECUCAO DA PROC COM PARAMETRO DE SAIDA */

/* TSQL - TRANSACTION SQL -> LINGUAGEM QUE O SQL SERVER TRABALHA */

DECLARE @SAIDA INT
EXEC GET_TIPO @TIPO = 'CEL', @CONTADOR = @SAIDA OUTPUT
SELECT @SAIDA AS QUANTIDADE
GO

DECLARE @SAIDA INT
EXEC GET_TIPO @TIPO = 'RES', @CONTADOR = @SAIDA OUTPUT
SELECT @SAIDA AS QUANTIDADE
GO

DECLARE @SAIDA INT
EXEC GET_TIPO 'COM', @SAIDA OUTPUT
SELECT @SAIDA AS QUANTIDADE
GO

/* PROCEDURE DE CADASTRO */

CREATE PROC CADASTRO @NOME VARCHAR(30), @SEXO CHAR(1), @NASCIMENTO DATE, 
					 @TIPO CHAR(3), @NUMERO VARCHAR(10)
AS
	DECLARE @FK INT

	INSERT INTO PESSOA VALUES(@NOME, @SEXO, @NASCIMENTO)
	SET @FK = (SELECT IDPESSOA
			   FROM PESSOA
			   WHERE IDPESSOA = @@IDENTITY)

	INSERT INTO TELEFONE VALUES(@TIPO, @NUMERO, @FK)
GO

CADASTRO 'JORGE', 'M', '1979-01-01', 'CEL', '9754745'
GO

SELECT PESSOA.*, TELEFONE.*
FROM PESSOA
	INNER JOIN TELEFONE
	ON IDPESSOA = ID_PESSOA
GO

/* TSQL E UM BLOCO DE LINGUAGEM DE PROGRAMACAO
PROGRAMAS SÃO UNIDADES QUE PODEM SER CHAMADAS DE BLOCOS
ANÔNIMOS. BLOCOS ANONIMOS NAO RECEBEM NOME, POIS
NAO SAO SALVOS NO BANCO.
CRIAMOS BLOCOS ANONIMOS QUANDO IREMOS EXECUTA-LOS
UMA SO VEZ OU TESTAR ALGO */

/* BLOCO DE EXECUCAO */

BEGIN
	PRINT 'PRIMEIRO BLOCO'
END
GO

/*BLOCO DE ATRIBUICAO DE VARIAVEIS*/

DECLARE
	@CONTADOR INT
BEGIN
	SET @CONTADOR = 5
	PRINT @CONTADOR
END
GO

/* NO SQL SERVER CADA COLUNA, VARIAVEL LOCAL, EXPRESSAO E PARAMETRO TEM UM TIPO. */

DECLARE
	@V_NUMERO NUMERIC(10,2) = 100.52,
	@V_DATA DATETIME = '20170207'
BEGIN
	PRINT 'VALOR NUMERICO : ' + CAST(@V_NUMERO AS VARCHAR)
	PRINT 'VALOR NUMERICO : ' + CONVERT(VARCHAR, @V_NUMERO)
	PRINT 'VALOR NUMERICO : ' + CAST(@V_DATA AS VARCHAR)
	PRINT 'VALOR DE DATA AMERICANO : ' + CONVERT(VARCHAR, @V_DATA, 121)
	PRINT 'VALOR DE DATA : ' + CONVERT(VARCHAR, @V_DATA, 120)
	PRINT 'VALOR DE DATA BRASILEIRO : ' + CONVERT(VARCHAR, @V_DATA, 105)
END
GO

CREATE TABLE CARROS(
	CARRO VARCHAR(20),
	FABRICANTE VARCHAR(30)
)
GO

INSERT INTO CARROS VALUES ('Civic', 'Honda');
INSERT INTO CARROS VALUES ('Corolla', 'Toyota');
INSERT INTO CARROS VALUES ('Golf', 'Volkswagen');
INSERT INTO CARROS VALUES ('Focus', 'Ford');
INSERT INTO CARROS VALUES ('Mazda3', 'Mazda');
INSERT INTO CARROS VALUES ('Elantra', 'Hyundai');
INSERT INTO CARROS VALUES ('Sentra', 'Nissan');
INSERT INTO CARROS VALUES ('Impala', 'Chevrolet');
INSERT INTO CARROS VALUES ('Optima', 'Kia');
INSERT INTO CARROS VALUES ('Fusion', 'Ford');
INSERT INTO CARROS VALUES ('Camry', 'Toyota');
INSERT INTO CARROS VALUES ('Corolla', 'Toyota');
INSERT INTO CARROS VALUES ('Highlander', 'Toyota');
INSERT INTO CARROS VALUES ('Civic', 'Honda');
INSERT INTO CARROS VALUES ('Accord', 'Honda');
INSERT INTO CARROS VALUES ('CR-V', 'Honda');
INSERT INTO CARROS VALUES ('Malibu', 'Chevrolet');
INSERT INTO CARROS VALUES ('Impala', 'Chevrolet');
INSERT INTO CARROS VALUES ('Sonic', 'Chevrolet');
INSERT INTO CARROS VALUES ('Focus', 'Ford');

DECLARE
	@V_CONT_FORD INT,
	@V_CONT_CHEVROLET INT
BEGIN
	--METODO 1 - O SELECT PRECISA RETORNAR UMA SIMPLES COLUNA
	--E UM RESULTADO

	SET @V_CONT_FORD = (SELECT COUNT(*) FROM CARROS
						WHERE FABRICANTE = 'FORD')

	PRINT 'QUANTIDADE FORD: ' + CAST(@V_CONT_FORD AS VARCHAR)

	--METODO 2
	SELECT @V_CONT_CHEVROLET = COUNT(*) FROM CARROS 
							   WHERE FABRICANTE = 'CHEVROLET'

	PRINT 'QUANTIDADE CHEVROLET: ' + CAST(@V_CONT_CHEVROLET AS VARCHAR)
END
GO

/* BLOCOS IF E ELSE */

DECLARE 
	@NUMERO INT = 5
BEGIN
	IF @NUMERO = 5 --EXPRESSAO BOOLEANA - TRUE
		PRINT 'O VALOR É VERDADEIRO'
	ELSE
		PRINT 'O VALOR É FALSO'
END
GO

/* CASE */
DECLARE
	@CONTADOR INT
BEGIN
	SELECT -- O CASE REPRESENTA UMA COLUNA
	CASE
		WHEN FABRICANTE = 'FORD' THEN 'FAIXA 1'
		WHEN FABRICANTE = 'CHEVROLET' THEN 'FAIXA 2'
		ELSE 'OUTRAS FAIXAS'
	END AS "INFORMACOES",
	*
	FROM CARROS
END
GO

/* BLOCO NOMEADO - PROCEDURES*/

/* BLOCOS IF E ELSE - PROCEDURE EXERCICIO*/
CREATE PROC IF_ELSE @NUMERO INT
AS
	IF @NUMERO = 5 --EXPRESSAO BOOLEANA - TRUE
		PRINT 'O VALOR É VERDADEIRO'
	ELSE
		PRINT 'O VALOR É FALSO'
GO

EXEC IF_ELSE 6
GO

EXEC IF_ELSE 5
GO

/* LOOPS */

DECLARE
	@I INT = 1
BEGIN
	WHILE (@I < 15)
		BEGIN
			PRINT 'VALOR DE I: ' + CAST(@I AS VARCHAR)
			SET @I = @I + 1
		END
END
GO
